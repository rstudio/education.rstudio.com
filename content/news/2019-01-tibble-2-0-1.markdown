---
title: tibble 2.0.1
slug: tibble-2.0.1
description: >
    Tibbles are a modern reimagining of the data frame, keeping what time has shown to be effective, and throwing out what is not, with nicer default output too! This article describes the latest major release and provides an outlook on further developments.
date: 2019-01-15
author: Kirill MÃ¼ller
photo:
  url: https://unsplash.com/photos/KA89yJKYtjE
  author: Marcello Gennari
categories: [package]
---




<STYLE type='text/css' scoped>
PRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};
</STYLE>


I'm pleased to announce that version 2.0.1 of the *tibble* package is on CRAN now, just in time for [rstudio::conf()](https://www.rstudio.com/conference/). Tibbles are a modern reimagining of the data frame, keeping what time has shown to be effective, and throwing out what is not, with nicer default output too! Grab the latest version with:

```r
install.packages("tibble")
```

This release required a bit of preparation, including a [pre-release blog post](https://www.tidyverse.org/articles/2018/11/tibble-2.0.0-pre-announce/) that described the breaking changes, mostly in [`as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html), [`new_tibble()`](https://tibble.tidyverse.org/reference/new_tibble.html), [`set_tidy_names()`](https://tibble.tidyverse.org/reference/set_tidy_names.html), [`tidy_names()`](https://tibble.tidyverse.org/reference/tidy_names.html), and `names<-()`, and a patch release that fixed problems found after the initial 2.0.0 release.
In this blog post, I focus on a few user- and programmer-related changes, and give an outlook over future development:

- [`view()`](https://tibble.tidyverse.org/reference/view.html), nameless [`enframe()`](https://tibble.tidyverse.org/reference/enframe.html), 2D columns
- Lifecycle, robustness, name repair, row names, [`glimpse()`](https://tibble.tidyverse.org/reference/glimpse.html) for subclasses
- _vctrs_, dependencies, decorations

For a complete overview please see the [release notes](https://github.com/tidyverse/tibble/releases/tag/v2.0.0).

Use the [issue tracker](https://github.com/tidyverse/tibble/issues) to submit bugs or suggest ideas, your contributions are always welcome.

## Changes that affect users

### view

The experimental [`view()`](https://tibble.tidyverse.org/reference/view.html) function forwards its input to `utils::View()` (only in interactive mode) and always returns its input invisibly, which is useful for pipe-based workflows.
Currently it is unclear if this functionality should live in _tibble_ or elsewhere.


```r
# This is a no-op in non-interactive mode.
# In interactive mode, a viewer window/pane will open.
iris %>%
  view()
```


### Nameless enframe

The [`enframe()`](https://tibble.tidyverse.org/reference/enframe.html) function always has been a good way to convert a (named) vector to a two-column data frame.
In this version, conversion to a one-column data frame is also supported by setting the `name` argument to `NULL`.
This is now the recommended way to turn a vector to a one-column tibble, due to changes to the default implementation of [`as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html).


```r
enframe(letters[1:3])
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 3 x 2</span>
#&gt;    name value
#&gt;   <span style='color: #555555;font-style: italic;'>&lt;int&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;chr&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>     1 a    </span>
#&gt; <span style='color: #555555;'>2</span><span>     2 b    </span>
#&gt; <span style='color: #555555;'>3</span><span>     3 c</span></CODE></PRE>

```r
enframe(letters[1:3], name = NULL)
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 3 x 1</span>
#&gt;   value
#&gt;   <span style='color: #555555;font-style: italic;'>&lt;chr&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span> a    </span>
#&gt; <span style='color: #555555;'>2</span><span> b    </span>
#&gt; <span style='color: #555555;'>3</span><span> c</span></CODE></PRE>


### 2D columns

`tibble()` now supports columns that are matrices or data frames.
These have always been supported in data frames and are used in some modelling functions.
We are looking forward to supporting these and other exciting use cases, see also the [Matrix and data frame columns](https://adv-r.hadley.nz/vectors-chap.html#matrix-and-data-frame-columns) chapter of adv-r.
The number of rows in these objects must be consistent with the length of the other columns.
Internally, this feature required using `NROW()` instead of `length()` in a few spots, which conveniently returns the length for vectors and the number of rows for 2D objects.
The required support in _pillar_ has been added earlier last year.


```r
tibble(
  a = 1:3,
  b = tibble(c = 4:6),
  d = tibble(e = 7:9, f = tibble(g = 10, h = 11)),
  i = diag(3)
)
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 3 x 4</span>
#&gt;       a   b$c   d$e  `\(f\)`g   $$h i[,1]  [,2]  [,3]
#&gt;   <span style='color: #555555;font-style: italic;'>&lt;int&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;int&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;int&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>     1     4     7    10    11     1     0     0</span>
#&gt; <span style='color: #555555;'>2</span><span>     2     5     8    10    11     0     1     0</span>
#&gt; <span style='color: #555555;'>3</span><span>     3     6     9    10    11     0     0     1</span></CODE></PRE>

## Changes that affect package developers

### Lifecycle

[![Life
cycle](https://img.shields.io/badge/lifecycle-stable-brightgreen.svg)](https://www.tidyverse.org/lifecycle/)

All functions have been assigned a lifecycle.
The _tibble_ package has now reached the "stable" lifecycle, functions in a different lifecycle stage are marked as such in their documentation.
One example is the [`add_row()`](https://tibble.tidyverse.org/reference/add_row.html) function: it is unclear if it  should ensure that all columns have length one by wrapping in a list if necessary, and a better implementation is perhaps possible once _tibble_ uses the _vctrs_ package, see below.
Therefore this function is marked "questioning".
Learn more about lifecycle in the tidyverse at https://www.tidyverse.org/lifecycle/.

### Robustness

The new `.rows` argument to [`tibble()`](https://tibble.tidyverse.org/reference/tibble.html) and [`as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html) allows specifying the expected number of rows explicitly, even if it's evident from the data.
This supports writing even more defensive code.
The `nrow` argument to the low-level [`new_tibble()`](https://tibble.tidyverse.org/reference/new_tibble.html) constructor is now mandatory, on the other hand most expensive checks have been moved to the new [`validate_tibble()`](https://tibble.tidyverse.org/reference/validate_tibble.html) function.
This means that constructions of tibbles is now faster by default if you know that the inputs are correct, but you can always double-check if needed.
See also the [S3 classes](https://adv-r.hadley.nz/s3.html#s3-classes) chapter in adv-r for motivation.


```r
tibble(a = 1, b = 1:3, .rows = 3)
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 3 x 2</span>
#&gt;       a     b
#&gt;   <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;int&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>     1     1</span>
#&gt; <span style='color: #555555;'>2</span><span>     1     2</span>
#&gt; <span style='color: #555555;'>3</span><span>     1     3</span></CODE></PRE>

```r
tibble(a = 1, b = 2:3, .rows = 3)
#> Error: Tibble columns must have consistent lengths, only values of length one are recycled:
#> * Length 3: Requested with `.rows` argument
#> * Length 2: Column `b`
tibble(a = 1, .rows = 3)
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 3 x 1</span>
#&gt;       a
#&gt;   <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>     1</span>
#&gt; <span style='color: #555555;'>2</span><span>     1</span>
#&gt; <span style='color: #555555;'>3</span><span>     1</span></CODE></PRE>

```r
as_tibble(iris[1:3, ], .rows = 3)
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 3 x 5</span>
#&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
#&gt;          <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span>       </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span>        </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span>       </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;fct&gt;</span><span>  </span>
#&gt; <span style='color: #555555;'>1</span><span>          5.1         3.5          1.4         0.2 setosa </span>
#&gt; <span style='color: #555555;'>2</span><span>          4.9         3            1.4         0.2 setosa </span>
#&gt; <span style='color: #555555;'>3</span><span>          4.7         3.2          1.3         0.2 setosa</span></CODE></PRE>

```r
new_tibble(list(a = 1:3), nrow = 3)
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 3 x 1</span>
#&gt;       a
#&gt;   <span style='color: #555555;font-style: italic;'>&lt;int&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>     1</span>
#&gt; <span style='color: #555555;'>2</span><span>     2</span>
#&gt; <span style='color: #555555;'>3</span><span>     3</span></CODE></PRE>

```r
bad <- new_tibble(list(a = 1:2), nrow = 3)
validate_tibble(bad)
#> Error: Tibble columns must have consistent lengths, only values of length one are recycled:
#> * Length 3: Requested with `nrow` argument
#> * Length 2: Column `a`
```


### Name repair

Column name repair has more direct support, via the new `.name_repair` argument to [`tibble()`](https://tibble.tidyverse.org/reference/tibble.html) and [`as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html).
It takes the following values:

  - `"minimal"`: No name repair or checks, beyond basic existence.
  - `"unique"`: Make sure names are unique and not empty.
  - `"check_unique"`: (default value), no name repair, but check they are `unique`.
  - `"universal"`: Make the names `unique` and syntactic.
  - a function: apply custom name repair (e.g., `.name_repair = make.names` or `.name_repair = ~make.names(., unique = TRUE)` for names in the style of base R).


```r
## by default, duplicate names are not allowed
tibble(`1a` = 1, `1a` = 2)
#> Error: Column name `1a` must not be duplicated.
#> Use .name_repair to specify repair.

## you can authorize duplicate names
tibble(`1a` = 1, `1a` = 2, .name_repair = "minimal")
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 1 x 2</span>
#&gt;    `1a`  `1a`
#&gt;   <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>     1     2</span></CODE></PRE>

```r
## or request that the names be made unique
tibble(`1a` = 1, `1a` = 2, .name_repair = "unique")
#> New names:
#> * `1a` -> `1a..1`
#> * `1a` -> `1a..2`
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 1 x 2</span>
#&gt;   `1a..1` `1a..2`
#&gt;     <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span>   </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>       1       2</span></CODE></PRE>

```r
## or universal
tibble(`1a` = 1, `1a` = 2, .name_repair = "universal")
#> New names:
#> * `1a` -> ..1a..1
#> * `1a` -> ..1a..2
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 1 x 2</span>
#&gt;   ..1a..1 ..1a..2
#&gt;     <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span>   </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span>
#&gt; <span style='color: #555555;'>1</span><span>       1       2</span></CODE></PRE>

### Row names

Row name handling is stricter.
Row names were never supported in [`tibble()`](https://tibble.tidyverse.org/reference/tibble.html) and [`new_tibble()`](https://tibble.tidyverse.org/reference/new_tibble.html), and are now stripped by default in [`as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html).
The `rownames` argument to [`as_tibble()`](https://tibble.tidyverse.org/reference/as_tibble.html) supports:

  - `NULL`: remove row names (default),
  - `NA`: keep row names,
  - A string: the name of the new column that will contain the existing row names, which are no longer present in the result.
    
  The old default can be restored by calling `pkgconfig::set_config("tibble::rownames", NA)`, this also works for packages that import _tibble_.
    

```r
rownames(as_tibble(mtcars))
#>  [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14"
#> [15] "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28"
#> [29] "29" "30" "31" "32"
as_tibble(mtcars, rownames = "make_model")
```

<PRE class="fansi fansi-output"><CODE>#&gt; <span style='color: #555555;'># A tibble: 32 x 12</span>
#&gt;    make_model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear
#&gt;    <span style='color: #555555;font-style: italic;'>&lt;chr&gt;</span><span>      </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span>
#&gt; <span style='color: #555555;'> 1</span><span> Mazda RX4   21       6  160    110  3.9   2.62  16.5     0     1     4</span>
#&gt; <span style='color: #555555;'> 2</span><span> Mazda RX4â¦  21       6  160    110  3.9   2.88  17.0     0     1     4</span>
#&gt; <span style='color: #555555;'> 3</span><span> Datsun 710  22.8     4  108     93  3.85  2.32  18.6     1     1     4</span>
#&gt; <span style='color: #555555;'> 4</span><span> Hornet 4 â¦  21.4     6  258    110  3.08  3.22  19.4     1     0     3</span>
#&gt; <span style='color: #555555;'> 5</span><span> Hornet Spâ¦  18.7     8  360    175  3.15  3.44  17.0     0     0     3</span>
#&gt; <span style='color: #555555;'> 6</span><span> Valiant     18.1     6  225    105  2.76  3.46  20.2     1     0     3</span>
#&gt; <span style='color: #555555;'> 7</span><span> Duster 360  14.3     8  360    245  3.21  3.57  15.8     0     0     3</span>
#&gt; <span style='color: #555555;'> 8</span><span> Merc 240D   24.4     4  147.    62  3.69  3.19  20       1     0     4</span>
#&gt; <span style='color: #555555;'> 9</span><span> Merc 230    22.8     4  141.    95  3.92  3.15  22.9     1     0     4</span>
#&gt; <span style='color: #555555;'>10</span><span> Merc 280    19.2     6  168.   123  3.92  3.44  18.3     1     0     4</span>
#&gt; <span style='color: #555555;'># â¦ with 22 more rows, and 1 more variable: carb </span><span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span></CODE></PRE>


### glimpse for subclasses

The [`glimpse()`](https://tibble.tidyverse.org/reference/glimpse.html) function shows information obtained from [`tbl_sum()`](https://tibble.tidyverse.org/reference/tbl_sum.html) in the header, e.g. grouping information for `grouped_df` from _dplyr_, or other information from packages that override the `tbl_df` class.


```r
iris %>%
  group_by(Species) %>%
  glimpse()
```

<PRE class="fansi fansi-output"><CODE>#&gt; Observations: 150
#&gt; Variables: 5
#&gt; Groups: Species [3]
#&gt; $ Sepal.Length <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5â¦</span>
#&gt; $ Sepal.Width  <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3â¦</span>
#&gt; $ Petal.Length <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1â¦</span>
#&gt; $ Petal.Width  <span style='color: #555555;font-style: italic;'>&lt;dbl&gt;</span><span> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0â¦</span>
#&gt; $ Species      <span style='color: #555555;font-style: italic;'>&lt;fct&gt;</span><span> setosa, setosa, setosa, setosa, setosa, setosa, setâ¦</span></CODE></PRE>


## Outlook

### vctrs

The plan is to [use _vctrs_](https://github.com/tidyverse/tibble/issues/521) in _tibble_ 2.1.0.
This package is a solid foundation for handling coercion, concatenation and recycling in vectors of arbitrary type.
The support provided by _vctrs_ will yield a better [`add_row()`](https://tibble.tidyverse.org/reference/add_row.html) implementation, in return name repair which is currently defined in _tibble_ should likely live in _vctrs_.

### Dependencies

Currently, installing _tibble_ can bring in almost dozen other packages:


```r
tools::package_dependencies("tibble", recursive = TRUE, which = "Imports")
#> $tibble
#>  [1] "cli"        "crayon"     "fansi"      "methods"    "pillar"    
#>  [6] "pkgconfig"  "rlang"      "utils"      "assertthat" "grDevices" 
#> [11] "utf8"       "tools"
```

Some of them, namely _fansi_ and _utf8_, contain code that requires compilation and are only required for optional features.
[The plan](https://github.com/tidyverse/tibble/issues/475) is to make these packages, and _crayon_, a suggested package to _cli_, and provide fallback implementations there.
When finished, taking a strong dependency on _tibble_ won't add too many new dependencies (again): _rlang_, _vctrs_ and _cli_ will be used by most of the tidyverse anyway, _pillar_ is the only truly new strong dependency.
Packages that subclass `tbl_df` should import _tibble_ to make sure that the subsetting operator `[` always behaves the same.
Constructing (subclasses of) tibbles should happen through [`new_tibble()`](https://tibble.tidyverse.org/reference/new_tibble.html) only.


### Decorations

Tibbles have a very opinionated way to print their data, not always in line with users' expectations, and sometimes clearly wrong (e.g. for numerical data where the absolute mean is much larger than the standard deviation).
It seems difficult to devise a formatting that suits all needs, especially for numbers: how do we tell if a number represents money, or perhaps is a misspecified categorical variable or a UID?
[Decorations](https://github.com/tidyverse/tibble/pull/411) are an idea that might help here.
A decoration is applied only when printing a vector, which behaves identically to a bare vector otherwise.
Decorations can be "learned" from the data (using heuristics), or specified directly after import or when creating column,
and stored in attribues like `"class"`.
It will be important to make sure that these attributes survive subsetting and perhaps some arithmetic transformations, easiest to achieve with the help of _vctrs_.


## Acknowledgments

Thanks to Brodie Gaslam ([&#x0040;brodieG](https://github.com/brodieG)) for his help with formatting this blog post and for spotting inaccurate wording.

We also received issues, pull requests, and comments from 108 people since tibble 1.4.2. Thanks to everyone:

[&#x0040;adam-gruer](https://github.com/adam-gruer), [&#x0040;aegerton](https://github.com/aegerton), [&#x0040;alaindanet](https://github.com/alaindanet), [&#x0040;alexpghayes](https://github.com/alexpghayes), [&#x0040;alexwhan](https://github.com/alexwhan), [&#x0040;alistaire47](https://github.com/alistaire47), [&#x0040;anhqle](https://github.com/anhqle), [&#x0040;batpigandme](https://github.com/batpigandme), [&#x0040;brendanf](https://github.com/brendanf), [&#x0040;brodieG](https://github.com/brodieG), [&#x0040;cfhammill](https://github.com/cfhammill), [&#x0040;christophsax](https://github.com/christophsax), [&#x0040;cimentadaj](https://github.com/cimentadaj), [&#x0040;czeildi](https://github.com/czeildi), [&#x0040;DasHammett](https://github.com/DasHammett), [&#x0040;DavisVaughan](https://github.com/DavisVaughan), [&#x0040;earowang](https://github.com/earowang), [&#x0040;Eluvias](https://github.com/Eluvias), [&#x0040;Enchufa2](https://github.com/Enchufa2), [&#x0040;esford3](https://github.com/esford3), [&#x0040;flying-sheep](https://github.com/flying-sheep), [&#x0040;gavinsimpson](https://github.com/gavinsimpson), [&#x0040;GeorgeHayduke](https://github.com/GeorgeHayduke), [&#x0040;gregorp](https://github.com/gregorp), [&#x0040;hadley](https://github.com/hadley), [&#x0040;IndrajeetPatil](https://github.com/IndrajeetPatil), [&#x0040;iron0012](https://github.com/iron0012), [&#x0040;isteves](https://github.com/isteves), [&#x0040;jeffreyhanson](https://github.com/jeffreyhanson), [&#x0040;jennybc](https://github.com/jennybc), [&#x0040;jimhester](https://github.com/jimhester), [&#x0040;JLYJabc](https://github.com/JLYJabc), [&#x0040;joranE](https://github.com/joranE), [&#x0040;jtelleriar](https://github.com/jtelleriar), [&#x0040;karldw](https://github.com/karldw), [&#x0040;kendonB](https://github.com/kendonB), [&#x0040;kevinushey](https://github.com/kevinushey), [&#x0040;kovla](https://github.com/kovla), [&#x0040;lbusett](https://github.com/lbusett), [&#x0040;lionel-](https://github.com/lionel-), [&#x0040;lorenzwalthert](https://github.com/lorenzwalthert), [&#x0040;lwiklendt](https://github.com/lwiklendt), [&#x0040;mattfidler](https://github.com/mattfidler), [&#x0040;MatthieuStigler](https://github.com/MatthieuStigler), [&#x0040;maxheld83](https://github.com/maxheld83), [&#x0040;michaelweylandt](https://github.com/michaelweylandt), [&#x0040;mingsu](https://github.com/mingsu), [&#x0040;momeara](https://github.com/momeara), [&#x0040;PalaceChan](https://github.com/PalaceChan), [&#x0040;pat-s](https://github.com/pat-s), [&#x0040;plantarum](https://github.com/plantarum), [&#x0040;prosoitos](https://github.com/prosoitos), [&#x0040;ptoche](https://github.com/ptoche), [&#x0040;QuLogic](https://github.com/QuLogic), [&#x0040;ralonso-igenomix](https://github.com/ralonso-igenomix), [&#x0040;randomgambit](https://github.com/randomgambit), [&#x0040;riccardopinosio](https://github.com/riccardopinosio), [&#x0040;romainfrancois](https://github.com/romainfrancois), [&#x0040;tomroh](https://github.com/tomroh), [&#x0040;Woosah](https://github.com/Woosah), [&#x0040;yonicd](https://github.com/yonicd), and [&#x0040;yutannihilation](https://github.com/yutannihilation).
